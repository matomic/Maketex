# SHELL=bash
include makefig_defs.mk
### Makefile includes for figure folders, mainly for producing PDF and EPS
### for inclusion in LaTeX document
###
### Support Work flow:
### >> gnuplot with standalone epslatex terminal
###    1. Scan *gp and *gpi for 'set o' arguments
###    2. @epstopdf: %-inc.eps -- %-inc.pdf 
###    3. @pdflatex: %.tex %-inc.pdf -- %.pdf
###    4. @pdftops:  %.pdf -- %.ps
###
### >> xfig figures
###
### >> PGF/TIKZ LaTeX source
###    1. @pdflatex: %$(TIKZ).tex -- %$(TIKZ).pdf
###    2. @pdftops:  %$(TIKZ).pdf -- %$(TIKZ).eps
###
### >> Python source
###    1. Scan *py for PDF output
###    2. @python: *pdf
###
### >> Other eps figures

## MASTER LIST ##
# Make a list of existing eps and pdf figures ##
allEPS   = $(wildcard *.eps)
allPDF   = $(wildcard *.pdf)

## GNUPLOT VARS ##
# Examine all the Gnuplot source file:
gnpSRCs  = $(wildcard *.gp *.gpi)
# to for stand alone latex output: %.tex + %-inc.eps:
gnpTEX  := $(foreach src, $(gnpSRCs), $(call gnuplot_outs,$(src)))
gnpEPSi := $(gnpTEX:.tex=-inc.eps)
# %-inc.eps will then produce %-inc.pdf
gnpPDFi := $(gnpTEX:.tex=-inc.pdf)
# outputs %.eps and %pdf:
gnpEPS  := $(gnpTEX:.tex=.eps)
gnpPDF  := $(gnpTEX:.tex=.pdf)
# subract gnuplot list from master list:
## wanted to use make to update plot whenever data are updated, perhaps should set manual modeline:
##gnpData := $(call gnuplot_deps, figGBL_LL.gp)

## XFIG VARS ##
xfgSRC  = $(wildcard *fig)
xfgEPS  = $(xfgSRC:.fig=.eps)
xfgPDF  = $(xfgSRC:.fig=.pdf)

## TIKZ VARS ##
TIKZ :=_tikz
tikzTEX = $(wildcard *$(TIKZ).tex)
tikzEPS = $(tikzTEX:.tex=.eps)
tikzPDF = $(tikzTEX:.tex=.pdf)

## PYTHON/MATPLOTLIBS VARS ##
pySRC   = $(wildcard *.py)
pyPDF   = $(foreach src,$(pySRC), $(call python_outs,$(src)))
pyEPS   = $(pyPDF:.pdf=.eps)

## Mathematica sources ##
nbSRC   = $(wildcard *.nb)
# scan the Mathematica source for exports
nbEPS   = $(call mathnb_export, $(nbSRC), eps)
nbPDF   = $(call mathnb_export, $(nbSRC), pdf)

## tex ##
allTEX  = $(tikzTEX) $(gnpTEX)

## ORPHANED ##
## These remaining figures are not produced by any of the above techniques ##
orpEPS  = $(filter-out $(tikzEPS) $(gnpEPS) $(gnpEPSi) $(xfgEPS) \
	$(pyEPS) $(nbEPS), $(allEPS))
orpPDF  = $(filter-out $(tikzPDF) $(gnpPDF) $(gnpPDFi) $(xfgPDF) \
	$(pyPDF) $(nbPDF), $(allPDF))

.PHONY : all clean info allfromeps allfrompdf

.INTERMEDIATE : $(allTEX:tex=aux) $(allTEX:tex=log) $(gnpEPSi) $(gnpPDFi)

all : pdf eps

pdf : $(gnpPDF) $(tikzPDF) $(pyPDF) $(xfgPDF)
	@printf "Make PDF completes. Potentially orphaned PDF:\n"; \
		printf "  %s\n" $(orpPDF);

eps : $(gnpEPS) $(tikzEPS) $(pyEPS) $(xfgEPS)
	@printf "Make EPS completes. Potentially orphaned EPS:\n"; \
		printf "  %s\n" $(orpEPS);

orphan : orphanpdf orphaneps
orphanpdf : $(orpPDF)
orphaneps : $(orpeps)

######## Use with care #########
allfromeps : all $(allEPS:.eps=.pdf)
allfrompdf : all $(allPDF:.pdf=.eps)

#######
depinfo :
	# GNUPLOTS: 

# remove auxiliary files
trash:
	rm -f $(gnpEPSi) $(gnpPDFi)  *.aux *.log *.dvi

# Also clean final product
clean : trash
	rm -f $(gnpTEX) $(gnpPDF) $(gnpEPS) $(tikzEPS) $(tikzPDF) $(pyEPS) $(pyPDF)

cleanorphan :
	rm -f $(orpEPS) $(orpPDF)

.SECONDEXPANSION:
#	$$(subst $$(suffix $$@),.tex,$$@) \
#	$$(subst $$(suffix $$@),-inc.pdf,$$@)
$(gnpPDF) $(gnpPDF:.pdf=.aux) $(gnpPDF:.pdf=.log) : \
	$$(call substsuffix,.tex,$$@) \
	$$(call substsuffix,-inc.pdf,$$@)
	@$(call cprun,pdflatex,$?, $@)
	@pdflatex -interaction=nonstopmode $< > /dev/null;

$(gnpTEX) $(gnpEPSi) : $$(shell grep -l "$$@" $$(gnpSRCs))
	@$(call cprun,gnuplot,$<, $(strip $(call gnuplot_outs,$?)))
	@gnuplot $<;

$(pyPDF) : $$(shell grep -l "$$@" $$(pySRC))
	@$(call cprun,python,$<,$(strip $(call python_outs,$?)))
	@python  $< $@;

### PATTERN RULES ###
%.pdf %.aux %.log : %.tex
	@$(call cprun,pdflatex,$?,$(@:.eps=.pdf))
	@pdflatex -interaction=nonstopmode $< > /dev/null;

%.pdf %.eps  : %.fig
	@$(call cprun,fig2pdf,$?,$@ $(@:.eps=.pdf))
	@fig2pdf -f -C -i "$(call substsuffix,_def.tex,$@)" $< > /dev/null

# These two rules can make make throw circular dependency warning for orphaned files. Should be safe to ignore. One assumes that source eps/pdf file of un-handled origin can be update manually by make orphan
%.eps : %.pdf
	@$(call cprun,pdftops,$?,$@)
	@pdftops $< $@;

%.pdf : %.eps
	@$(call cprun,epstopdf,$?,$@) # @printf "epstopdf $<\n";
	@epstopdf $<;
